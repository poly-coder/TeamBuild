@using global::MudBlazor
@using MudBlazor

@attribute [CustomView(TeamBuildCoreMudBlazor.UiSelector)]

@if (Exception is null)
{
    return;
}

<MudPaper Class="pa-4" Elevation="1">
    <MudStack Spacing="2">
        <MudButton OnClick="() => expanded = !expanded"
                   Color="Color.Error"
                   EndIcon="@ButtonIcon">
            @Title
            <MudSpacer />
        </MudButton>
        <MudDivider />
        <MudCollapse Expanded="@expanded">
            <MudSimpleTable Elevation="0">
                <thead>
                    <tr>
                        <th style="width: 1%;"></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <MudText Typo="Typo.button">
                                Message:
                            </MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.body1">
                                @Exception.Message
                            </MudText>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudText Typo="Typo.button">
                                Type:
                            </MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.body1">
                                @Exception.GetType().FullName
                            </MudText>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudText Typo="Typo.button">
                                HResult:
                            </MudText>
                        </td>
                        <td>
                            <MudText Typo="Typo.body1">
                                0x@(Exception.HResult.ToString("X8"))
                            </MudText>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <MudText Typo="Typo.button" Style="white-space: nowrap">
                                Stack Trace:
                            </MudText>
                        </td>
                        <td>
                            <pre style="max-height: 300px; max-width: 100%; overflow-y: auto; overflow-x: auto;">
                                @Exception.StackTrace
                            </pre>
                        </td>
                    </tr>
                </tbody>
            </MudSimpleTable>
            <MudStack Row="true" Class="flex-wrap">
                <TbMudCopyButton CopyJson="@ExceptionData" Label="Copy Json" />
            </MudStack>
        </MudCollapse>
    </MudStack>
</MudPaper>

@code
{
    [Parameter]
    public Exception? Exception { get; set; }

    protected string Title => Exception?.Message ?? "An error occurred";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        StateHasChanged();
    }

    private bool expanded;
    private string ButtonIcon => expanded ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown;

    private object? ExceptionData =>
        Exception is not null ? new
        {
            Exception.Message,
            Type = Exception.GetType().FullName,
            HResult = Exception.HResult.ToString("X8"),
            Exception.StackTrace
        } : null;
}
