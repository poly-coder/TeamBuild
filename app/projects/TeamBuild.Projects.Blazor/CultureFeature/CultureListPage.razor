@using System.Diagnostics
@using TeamBuild.Projects.Application.CultureFeature
@using TeamBuild.Projects.Domain.CultureFeature
@attribute [Route(CultureRoutes.ListRoute)]

@inject NavigationManager Nav
@inject ICultureQueryService QueryService

<TbPageComponent Title="Cultures" Breadcrumbs="@Breadcrumbs">
    <TopBar>
        <TbAddButton Href="@CultureRoutes.New()" />
    </TopBar>

    <ChildContent>
        @if (search is not null)
        {
            <CultureListSearchView OnSubmit="f => search?.Execute(f)"
                                   IsSubmitting="search.Stage == TbOperationStage.Running" />

            if (search.TryGetException(out var exception))
            {
                <TbExceptionAlert Exception="exception" />
            }

            <CultureListView CultureList="cultureList"
                             OnCultureSelected="HandleOnCultureSelected"/>
        }

    </ChildContent>
</TbPageComponent>

@code
{
    private List<CultureDetails> cultureList = [];

    private IReadOnlyCollection<TbBreadcrumbItem> Breadcrumbs => [
        TbBreadcrumbItem.Current("Cultures", TbIcon.List)
    ];

    private TbAsyncOperation<CultureListSearchView.FormModel, CultureListQuerySuccess>? search;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        search = new(ExecuteSearch) { OnCompleted = HandleSearchCompleted };
        search.Execute(new());
    }

    private async Task<CultureListQuerySuccess> ExecuteSearch(
        CultureListSearchView.FormModel form,
        CancellationToken cancel)
    {
        var activity = TeamBuildProjectsBlazor.ActivitySource.StartActivity(
            name: $"{nameof(CultureListPage)}.{nameof(ExecuteSearch)}",
            kind: ActivityKind.Client);

        try
        {
            var success = await QueryService.List(form.MapToQuery(), cancel);

            activity?.SetTag("result.count", success.CultureList.Count);
            activity?.SetStatus(ActivityStatusCode.Ok);
            activity?.Stop();

            return success;
        }
        catch (Exception exception)
        {
            activity?.AddException(exception);
            activity?.SetStatus(ActivityStatusCode.Error, exception.Message);
            activity?.Stop();

            throw;
        }
    }

    private void HandleSearchCompleted(CultureListQuerySuccess success)
    {
        cultureList.AddRange(success.CultureList);
        StateHasChanged();
    }

    private void HandleOnCultureSelected(CultureDetails culture)
    {
        Nav.NavigateTo(CultureRoutes.Details(culture.CultureCode));
    }
}
