@using TeamBuild.Core.Domain
@using TeamBuild.Projects.Application.CultureFeature
@using TeamBuild.Projects.Domain.CultureFeature

@attribute [Route(CultureRoutes.ListRoute)]

@inject NavigationManager Nav
@inject ICultureQueryService QueryService

<TbMudPage Title="@CultureRoutes.ListTitle"
           Breadcrumbs="@CultureRoutes.ListBreadcrumbs">
    <TopBar>
        <TbMudGoToAddButton Href="@CultureRoutes.New()" />
    </TopBar>

    <ChildContent>
        @if (search is not null)
        {
            <CultureListView OnSearch="f => search?.Execute(f)"
                             IsSearching="@search.IsRunning"
                             SearchException="@search.Exception"
                             CultureList="@cultureList"
                             OnCultureSelected="HandleOnCultureSelected" />
        }

    </ChildContent>
</TbMudPage>

@code
{
    private List<CultureDetails> cultureList = [];

    private TbAsyncOperation<CultureListSearchView.FormModel, CultureListQuerySuccess>? search;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        search = new((form, cancel) => QueryService.List(form.MapToQuery(), cancel))
        {
            OnCompleted = (_, success) =>
            {
                cultureList.Clear();
                cultureList.AddRange(success.CultureList);
            },
            OnStageChanged = _ => StateHasChanged(),
            ActivitySource = TeamBuildProjectsBlazor.ActivitySource,
            ActivityName = $"{nameof(CultureListPage)}.Search",
            ActivityTags = TeamBuildProjectsBlazor.OperationTags(
                entity: CultureEntity.Caption,
                operation: TeamBuildCoreDomain.OperationListName
            ),
        };
        search.Execute(new());
    }

    private void HandleOnCultureSelected(CultureDetails culture)
    {
        Nav.NavigateTo(CultureRoutes.Details(culture.CultureCode));
    }
}
