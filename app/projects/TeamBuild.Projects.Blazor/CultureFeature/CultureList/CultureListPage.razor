@using TeamBuild.Core.Domain
@using TeamBuild.Projects.Application.CultureFeature
@using TeamBuild.Projects.Domain.CultureFeature

@attribute [Route(CultureRoutes.ListRoute)]

@inject NavigationManager Nav
@inject ICultureQueryService QueryService

<TbMudPage Title="@CultureRoutes.ListTitle"
           Breadcrumbs="@CultureRoutes.ListBreadcrumbs">
    <TopBar>
        <TbMudCopyButton CopyJson="@cultureList" Label="Copy Json" />
        <TbMudGoToAddButton Href="@CultureRoutes.New()" />
    </TopBar>

    <ChildContent>
        @if (search is not null)
        {
            <TbMudLoadingBar IsLoading="@search.IsRunning" />

            @if (search.TryGetException(out var searchException))
            {
                <TbMudExceptionAlert Exception="searchException" />
            }
        }

        @if (search is not null)
        {
            <CultureListView OnSearch="f => search?.Execute(f)"
                             CultureList="@cultureList"
                             OnViewCulture="HandleOnViewCulture"
                             OnEditCulture="HandleOnEditCulture"
                             OnDeleteCulture="HandleOnDeleteCulture" />
        }

    </ChildContent>
</TbMudPage>

@code
{
    private readonly List<CultureDetails> cultureList = [];

    private TbAsyncOperation<CultureListSearchView.FormModel, CultureListQuerySuccess>? search;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        search = new(SearchRunner)
        {
            OnCompleted = SearchCompleted,
            OnStageChanged = _ => StateHasChanged(),
            ActivitySource = TeamBuildProjectsBlazor.ActivitySource,
            ActivityName = $"{nameof(CultureListPage)}.Search",
            ActivityTags = TeamBuildProjectsBlazor.OperationTags(
                entity: CultureEntity.Caption,
                operation: TeamBuildCoreDomain.OperationListName
            ),
        };
        search.Execute(new());
    }

    private async Task<CultureListQuerySuccess> SearchRunner(
        CultureListSearchView.FormModel form,
        CancellationToken cancel)
    {
        return await QueryService.List(form.MapToQuery(), cancel);
    }

    private void SearchCompleted(CultureListSearchView.FormModel _, CultureListQuerySuccess success)
    {
        cultureList.Clear();
        cultureList.AddRange(success.CultureList);
    }

    private void HandleOnViewCulture(CultureDetails culture)
    {
        Nav.NavigateTo(CultureRoutes.Details(culture.CultureCode));
    }

    private void HandleOnEditCulture(CultureDetails culture)
    {
        Nav.NavigateTo(CultureRoutes.Edit(culture.CultureCode));
    }

    private void HandleOnDeleteCulture(CultureDetails culture)
    {
        Nav.NavigateTo(CultureRoutes.Delete(culture.CultureCode));
    }
}
