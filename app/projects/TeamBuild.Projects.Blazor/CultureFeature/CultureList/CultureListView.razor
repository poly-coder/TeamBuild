@using TeamBuild.Projects.Domain.CultureFeature
@using MudBlazor

<MudTable Items="CultureList"
          T="CultureDetails"
          Hover="true"
          Breakpoint="Breakpoint.Sm"
          Elevation="0"
          OnRowClick="a => HandleViewCulture(a.Item)">
    <HeaderContent>
        <MudTh Style="text-transform: uppercase; font-weight: bold; width: 1%;">Code</MudTh>
        <MudTh Style="text-transform: uppercase; font-weight: bold;">English</MudTh>
        <MudTh Style="text-transform: uppercase; font-weight: bold;">Native</MudTh>
        <MudTh Style="text-transform: uppercase; font-weight: bold; width: 1%;"></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Code">@context.CultureCode</MudTd>
        <MudTd DataLabel="English">@context.EnglishName</MudTd>
        <MudTd DataLabel="Native">@context.NativeName</MudTd>
        <MudTd DataLabel="Actions" HideSmall="false">
            <MudButtonGroup Size="Size.Small" Variant="Variant.Text">
                <MudIconButton Icon="@TbMudIcons.View"
                               Color="Color.Info"
                               OnClick="() => HandleViewCulture(context)"/>
                <MudIconButton Icon="@TbMudIcons.Edit"
                               Color="Color.Info"
                               OnClick="() => HandleEditCulture(context)"/>
                <MudIconButton Icon="@TbMudIcons.Delete"
                               Color="Color.Error"
                               OnClick="() => HandleDeleteCulture(context)"/>
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
</MudTable>


@code
{
    [Parameter]
    public EventCallback<CultureListSearchView.FormModel> OnSearch { get; set; }

    [Parameter]
    public IReadOnlyList<CultureDetails> CultureList { get; set; } = [];

    [Parameter]
    public EventCallback<CultureDetails> OnViewCulture { get; set; }

    [Parameter]
    public EventCallback<CultureDetails> OnEditCulture { get; set; }

    [Parameter]
    public EventCallback<CultureDetails> OnDeleteCulture { get; set; }

    protected async Task HandleViewCulture(CultureDetails? culture)
    {
        if (culture is not null)
            await OnViewCulture.InvokeAsync(culture);
    }

    protected async Task HandleEditCulture(CultureDetails? culture)
    {
        if (culture is not null)
            await OnEditCulture.InvokeAsync(culture);
    }

    protected async Task HandleDeleteCulture(CultureDetails? culture)
    {
        if (culture is not null)
            await OnDeleteCulture.InvokeAsync(culture);
    }
}
