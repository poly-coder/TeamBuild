@using TeamBuild.Projects.Domain.CultureFeature
@using MudBlazor

<CultureListSearchView OnSubmit="OnSearch"
                       IsSubmitting="@IsSearching"/>

@if (SearchException is not null)
{
    <TbMudExceptionAlert Exception="SearchException" />
}

<MudTable Items="CultureList"
          T="CultureDetails"
          Hover="true"
          Breakpoint="Breakpoint.Sm"
          Loading="@IsSearching"
          Elevation="0"
          OnRowClick="a => HandleSelectedCulture(a.Item)">
    <HeaderContent>
        <MudTh Style="text-transform: uppercase; font-weight: bold; width: 1%;">Code</MudTh>
        <MudTh Style="text-transform: uppercase; font-weight: bold;">English</MudTh>
        <MudTh Style="text-transform: uppercase; font-weight: bold;">Native</MudTh>
        <MudTh Style="text-transform: uppercase; font-weight: bold; width: 1%;"></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Code">@context.CultureCode</MudTd>
        <MudTd DataLabel="English">@context.EnglishName</MudTd>
        <MudTd DataLabel="Native">@context.NativeName</MudTd>
        <MudTd DataLabel="Actions" HideSmall="false">
            <MudIcon Icon="@TbMudIcons.View" Color="Color.Default" />
        </MudTd>
    </RowTemplate>
</MudTable>


@code
{
    [Parameter]
    public EventCallback<CultureListSearchView.FormModel> OnSearch { get; set; }

    [Parameter]
    public bool IsSearching { get; set; }

    [Parameter]
    public Exception? SearchException { get; set; }

    [Parameter]
    public IReadOnlyList<CultureDetails> CultureList { get; set; } = [];

    [Parameter]
    public EventCallback<CultureDetails> OnCultureSelected { get; set; }

    protected async Task HandleSelectedCulture(CultureDetails? culture)
    {
        if (culture is not null)
            await OnCultureSelected.InvokeAsync(culture);
    }
}
