@using TeamBuild.Projects.Application.CultureFeature
@using TeamBuild.Projects.Domain.CultureFeature
@attribute [Route(CultureRoutes.DeleteRoute)]
@*
@inject NavigationManager Nav
@inject ICultureCommandService CommandService
@inject ICultureQueryService QueryService
@inject IToastService Toasts

@if (CultureId is null)
{
    return;
}

<TbPageComponent Title="Delete Culture" Breadcrumbs="@Breadcrumbs">
    <ChildContent>
        <CultureDeleteView Culture="@Culture"
                           Exception="@(LoadException ?? DeleteException)"
                           IsLoading="@(IsLoading || IsDeleting)"
                           OnCancelClick="() => Nav.NavigateTo(CultureRoutes.Details(CultureId))"
                           OnDeleteClick="HandleOnDeleteClick" />
    </ChildContent>
</TbPageComponent>

@code
{
    [Parameter]
    public string? CultureId { get; set; }

    private IReadOnlyCollection<TbBreadcrumbItem> Breadcrumbs => [
        TbBreadcrumbItem.Create("Cultures", CultureRoutes.List(), TbIcon.List),
        TbBreadcrumbItem.Current("Edit Culture", TbIcon.Edit)
    ];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await HandleLoad();

    }

    protected bool IsLoading;
    protected Exception? LoadException;
    protected CultureDetails? Culture;

    private async Task HandleLoad()
    {
        if (string.IsNullOrWhiteSpace(CultureId)) return;

        IsLoading = true;
        LoadException = null;
        Culture = null;

        StateHasChanged();

        try
        {
            Culture = (await QueryService.GetById(new(CultureId))).Culture;
        }
        catch (Exception exception)
        {
            LoadException = exception;
            Toasts.ShowToast("Failed to load culture.", TbSeverity.Error);
        }

        IsLoading = false;
        StateHasChanged();
    }


    protected bool IsDeleting;
    protected Exception? DeleteException;

    private async Task HandleOnDeleteClick()
    {
        if (string.IsNullOrWhiteSpace(CultureId)) return;

        IsDeleting = true;
        DeleteException = null;

        StateHasChanged();

        try
        {
            await CommandService.Delete(new(CultureId));
            Toasts.ShowToast("Culture deleted successfully.", TbSeverity.Success);
            Nav.NavigateTo(CultureRoutes.List());
        }
        catch (Exception exception)
        {
            DeleteException = exception;
            Toasts.ShowToast("Failed to delete culture.", TbSeverity.Error);
        }

        IsDeleting = false;
        StateHasChanged();
    }
} *@
